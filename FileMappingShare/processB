#include "ProcessB.h"



void _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	setlocale(LC_ALL, "Chiness");

	FileMappingShare();

	_tprintf_s(_T("Input AnyKey To Exit\r\n"));
	_gettchar();
	_gettchar();
	return;
}

BOOL FileMappingShare()
{
	HANDLE		hMappingHandle = NULL;
	LPVOID		BaseAddress    = NULL;
	DWORD       LastError	   = ERROR_SUCCESS;

	if (!OpenMemoryMappingEx(ACCESS_WRITE, FALSE, _T("Iris"), &hMappingHandle, &BaseAddress))
		return FALSE;
	else {
		__try
		{

			_tprintf_s(_T("%s\r\n"), (TCHAR*)BaseAddress);
			memcpy(
				BaseAddress,
				_T("Crown for Queen"),
				sizeof(TCHAR)*(_tcslen(_T("Crown for Queen")) + 1));
			UnmapMemoryEx(hMappingHandle, BaseAddress);
			return TRUE;

		}
		__except (EXCEPTION_EXECUTE_HANDLER)
		{
			LastError = GetExceptionCode();
		}	

	}
	UnmapMemoryEx(hMappingHandle, BaseAddress);
	SetLastError(LastError);
	return FALSE;
}

BOOL
CreateMemroyMappingEx(
	_In_  DWORD ReadOrWrite,
	_In_  DWORD MaximumSizeHigh,
	_In_  DWORD MaximumSizeLow,
	_In_  LPCTSTR   ObjectName,
	_Out_ LPHANDLE  hMappingHandle,
	_Out_ LPVOID*   BaseAddress)
{
	DWORD  DesiredAccess = 0;
	DWORD  Protect = 0;
	HANDLE hFileMapping = NULL;
	LPVOID lpBaseAddress = NULL;
	int    LastError = 0;

	if (hMappingHandle == NULL || BaseAddress == NULL) {
		SetLastError(ERROR_INVALID_PARAMETER);
		return FALSE;
	}

	if (ReadOrWrite == ACCESS_READ) {
		Protect = PAGE_READONLY;
		DesiredAccess = SECTION_MAP_READ;

	}

	else if (ReadOrWrite == ACCESS_WRITE) {

		Protect = PAGE_READWRITE;
		DesiredAccess = SECTION_MAP_READ | SECTION_MAP_WRITE;
	}

	else {
		SetLastError(ERROR_INVALID_PARAMETER);
		return FALSE;
	}

	__try
	{
		hFileMapping = CreateFileMapping(
			INVALID_HANDLE_VALUE,
			NULL,
			Protect,
			MaximumSizeHigh,
		    MaximumSizeLow,
			ObjectName
		);

		if (hFileMapping != NULL) {
			*hMappingHandle = hFileMapping;
			lpBaseAddress = MapViewOfFile(hFileMapping, DesiredAccess, 0, 0, 0);
			if (BaseAddress != NULL) {
				(*BaseAddress) = lpBaseAddress;
				return TRUE;
			}
		}

	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{
		SetLastError(GetExceptionCode());
	}

	return FALSE;
}

BOOL 
OpenMemoryMappingEx(
	_In_  DWORD    ReadOrWrite, 
	_In_  BOOL     IsInheritHandle,
	_In_  LPCTSTR  ObjectName, 
	_Out_ HANDLE*  lphMappingHandle, 
	_Out_ LPVOID*  BaseAddress)
{
	DWORD  DesiredAccess = NULL;
	HANDLE hFileMapping  = NULL;
	LPVOID lpBaseAddress   = NULL;
	DWORD  LastError     = ERROR_SUCCESS;


	if (ObjectName == NULL || lphMappingHandle == NULL 
        || BaseAddress == NULL) {
		SetLastError(ERROR_INVALID_PARAMETER);
		return FALSE;
	}
	if (ReadOrWrite == ACCESS_READ) {
		DesiredAccess = SECTION_MAP_READ;
	}
	else if (ReadOrWrite == ACCESS_WRITE) {
		DesiredAccess = SECTION_MAP_READ | SECTION_MAP_WRITE;
	}
	else {
		SetLastError(ERROR_INVALID_PARAMETER);
		return FALSE;
	}

	__try
	{
		hFileMapping = OpenFileMapping(DesiredAccess, IsInheritHandle, ObjectName);
		if (hFileMapping != NULL) {
			*lphMappingHandle = hFileMapping;
			lpBaseAddress = MapViewOfFile(hFileMapping, DesiredAccess, 0, 0, 0);
			if (BaseAddress != NULL){
				(*BaseAddress) = lpBaseAddress;
				return TRUE;
			}
		}
	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{
		SetLastError(GetExceptionCode());

		return FALSE;
	}

	SetLastError(GetLastError());
	return FALSE;
}


BOOL UnmapMemoryEx(_In_ HANDLE hMappingHandle, _In_ LPCVOID BaseAddress)
{
	__try
	{
		if (UnmapViewOfFile((LPCVOID)BaseAddress)) {
			CloseHandleEx(hMappingHandle);
			return TRUE;
		}
		return FALSE;

	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{
		SetLastError(GetExceptionCode());
	}
	return FALSE;
}

BOOL CloseHandleEx(HANDLE hObject)
{
	DWORD HandleFlags;
	if (GetHandleInformation(hObject, &HandleFlags)
		&& (HandleFlags & HANDLE_FLAG_PROTECT_FROM_CLOSE) != HANDLE_FLAG_PROTECT_FROM_CLOSE)
		return !!CloseHandle(hObject);
	return FALSE;
}
